Post Link,QuestionId,QuestionTitle,QuestionBody,QuestionScore,QuestionAnswersCount,AnswerId,AnswerBody,AnswerScore
270022,270022,Why don't browsers' same-origin policies allow anonymous cross-origin requests?,"<p>Generally I've read the motivation for browser same-origin policies is to prevent data being obtained by an attacker because of the sending of credentials in a cross-origin request, and that if you're requesting entirely public data, the browser has no way of knowing that.</p>
<p>However, it does have a way of knowing whether it's sending credentials to the remote host.  Why doesn't <code>fetch</code>, for example (see <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API</a>), provide a mechanism to make a completely anonymous cross-origin request?  That would prevent an attacker getting information that may be sensitive, but would allow a script to request something like a totally public RSS feed.</p>
",2,3,270023,"<p>Cookies or HTTP headers in general are just one way of transmitting credentials. It's also possible that the user's IP address is used for authentication (whether that's a good idea is a different topic).</p>
<p>The browser cannot tell how the target application works, so it would be extremely dangerous to allow unrestricted cross-origin requests based on the assumption that all content which is accessible without cookies is automatically public.</p>
<p>However, the browser can <em>ask</em> the server which cross-origin requests should be allowed under which circumstances. This is implemented through <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"" rel=""nofollow noreferrer"">Cross-Origin Resource Sharing</a>. If the target application does in fact consider all resources public which are accessed without cookies or other authentication headers, it can send the appropriate CORS headers, and the browser will give JavaScript access to those resources.</p>
",0
